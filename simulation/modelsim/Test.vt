// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/30/2015 15:32:57"
                                                                                
// Verilog Test Bench template for design : Test
// 
// Simulation tool : ModelSim (Verilog)
// 

	`timescale 1 ns/ 1 ns
	module Test_vlg_tst();
	// constants                                           
	// general purpose registers
	reg eachvec;
	// test vector input registers
	reg input1;
	reg input2;
	reg rstN, mclk, nclk;
	// wires                                               
	wire output1;
	
	// assign statements (if any)                          
	Test i1 (
	// port map - connection between master ports and signals/registers   
		.input1(input1),
		.input2(input2),
		.output1(output1)
	);
	initial                                                
	begin                                                  
	// code that executes only once                        
	// insert code here --> begin
		rstN = 0;
		#100 rstN = 1;
	                                                       
	// --> end                                             
	$display("Running testbench");                       
	end
	
	initial
		begin
			mclk = 0;
			while(1)
				#10 mclk = !mclk;
		end
	initial
		begin
			nclk = 0;
			while(1)
				#30 nclk = !nclk;
		end
		
	always @(posedge mclk)
		if (!rstN)
			input1 = 0;
		else
			input1 = !input1;
	
	always @(posedge nclk)
		if (!rstN)
			input2 = 1;
		else
			input2 = !input2;
			
	always                                                 
	// optional sensitivity list                           
	// @(event1 or event2 or .... eventn)                  
	begin                                                  
	// code executes for every event on sensitivity list   
	// insert code here --> begin                          
	                                                       
	@eachvec;                                              
	// --> end                                             
	end                                                    

endmodule

